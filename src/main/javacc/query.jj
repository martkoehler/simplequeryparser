options
{
    LOOKAHEAD = 1;
    STATIC = false;
}

PARSER_BEGIN(SimpleQueryParser)
package de.koehler.parser;

public class SimpleQueryParser
{
}
PARSER_END(SimpleQueryParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
   <#DIGIT: ["0"-"9"]>
|  <#LOWER: ["a"-"z"]>
|  <#UPPER: ["A"-"Z", "_"]>
|  <APOSTROPHE: "'">
|  <#CHARACTER: <DIGIT> | <LOWER> | <UPPER>>
|  <TEXT: (<CHARACTER>)+>
}

/* OPERATORS */
TOKEN:
{
  <AND: "&" >
| <OR: "|" >
| <NOT: "!" >
| <LPAREN: "(" >
| <RPAREN: ")" >
}

void expression():
{
}
{
  term()
  (
    <OR> expression()
  )?
}

void term():
{
}
{
  unary()
  (
    <AND> term()
  )?
}

void unary():
{
}
{
  text()
| <NOT> text()
}

void text():
{
}
{
  <TEXT>
| <APOSTROPHE> expression() <APOSTROPHE>
| <LPAREN> expression() <RPAREN>
}