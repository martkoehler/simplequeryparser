options
{
    LOOKAHEAD = 1;
    STATIC = false;
}

PARSER_BEGIN(SimpleQueryParser)
package de.koehler.parser;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import java.io.Reader;
import java.io.StringReader;

public class SimpleQueryParser
{
    private CriteriaBuilder builder;

    public SimpleQueryParser(final CriteriaBuilder builder, final String query)
    {
        this((Reader)(new StringReader(query)));
        this.builder = builder;
    }

        public Predicate parse() throws ParseException {
            System.out.println("-- " +expression(builder));
            return null;
        }
}
PARSER_END(SimpleQueryParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
   <#DIGIT: ["0"-"9"]>
|  <#LOWER: ["a"-"z"]>
|  <#UPPER: ["A"-"Z", "_"]>
|  <APOSTROPHE: "'">
|  <#CHARACTER: <DIGIT> | <LOWER> | <UPPER>>
|  <TEXT: (<CHARACTER>)+>
}

/* OPERATORS */
TOKEN:
{
  <AND: "&" >
| <OR: "|" >
| <NOT: "!" >
| <LPAREN: "(" >
| <RPAREN: ")" >
}

String expression(CriteriaBuilder externalBuilder):
{
 CriteriaBuilder builder = externalBuilder;
 String expressionText;
}
{
  expressionText = term(builder)
  (
    <OR> expression(builder)
  )? {return expressionText;}
}

String term(CriteriaBuilder externalBuilder):
{
 CriteriaBuilder builder = externalBuilder;
 Token term;
 String termText;
}
{
  termText = unary(builder)
  (
    term = <AND> term(builder)
  )? {return termText;}
}

String unary(CriteriaBuilder externalBuilder):
{
 CriteriaBuilder builder = externalBuilder;
 Token unary;
 String unaryText = "";
}
{
  unaryText = text(builder) {return unaryText;}
| unary = <NOT> text(builder) {return unaryText;}
}

String text(CriteriaBuilder externalBuilder):
{
 CriteriaBuilder builder = externalBuilder;
 Token result;
}
{
  result = <TEXT> { System.out.println("found simple text"); return result.image;}
| result = <LPAREN> { System.out.println("left brackets"); } expression(builder) <RPAREN> { System.out.println("right brackets"); return result.image;}
| result = <APOSTROPHE> { System.out.println("found left apostrophe"); } expression(builder) <APOSTROPHE> { System.out.println("found right apostrophe"); return result.image;}
}