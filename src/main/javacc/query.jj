options
{
    LOOKAHEAD = 1;
    STATIC = false;
    IGNORE_CASE = true;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(SimpleQueryParser)
package de.koehler.parser;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import java.io.Reader;
import java.io.StringReader;

public class SimpleQueryParser
{
    private CriteriaBuilder builder;

    public SimpleQueryParser(final CriteriaBuilder builder, final String query)
    {
        this((Reader)(new StringReader(query)));
        this.builder = builder;
    }

        public Predicate parse() throws ParseException {
            System.out.println(expression());
            return null;
        }
}
PARSER_END(SimpleQueryParser)

SKIP :
{
" "
| "\r"
| "\t"
| "\r\n"
| "\n"
}

TOKEN :
{
   <#DIGIT: ["0"-"9"]>
|  <#LOWER: ["a"-"z", "ä","ö","ü","ß"]>
|  <#UPPER: ["A"-"Z", "Ä","Ö","Ü"]>
|  <#SPECIAL: [".", "-"]>
|  <LPAREN: "(" >
|  <RPAREN: ")" >
|  <PARENTHESIS: <LPAREN> | <RPAREN>>
|  <TEXT: (<APOSTROPHE>) (<CHARACTER> | <PARENTHESIS> | " ")* (<CHARACTER> | <PARENTHESIS>) (<CHARACTER> | " ")* (<APOSTROPHE>)
         | (<CHARACTER>) (<CHARACTER>  | " ")* (<CHARACTER>)
         | (<CHARACTER>)+ >
|  <CHARACTER: <DIGIT> | <LOWER> | <UPPER> | <SPECIAL> | <WILDCARD>>
|  <APOSTROPHE: "\'">
}

/* OPERATORS */
TOKEN:
{
  <AND: "&">
| <OR: "|" >
| <NOT: "!" >
| <WILDCARD: ["%","_"]>
| <EMPTY: "#">
}

String expression():
{
 Token operator = null;
 String first = "";
 String second = "";
}
{
  first = text()
  (
     operator = <OR> second = expression()
   | operator = <AND> second = expression()

  )? {return first + (operator == null ? "" : operator.image) + second;}
}

String text():
{
 Token token = null;

 String text = "";
}
{
  token = <EMPTY> {return token.image;}
| token = <TEXT> { return token.image;}
| token = <NOT> text = text() {return token.image + text;}
| <LPAREN> text = expression() <RPAREN> { return "("+text+")";}

}
